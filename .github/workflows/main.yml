---
name: Main Branch CI/CD

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'LICENSE'

env:
  DOTNET_VERSION: '9.0.x'
  # Set this to your Azure Container Registry name (e.g., 'myregistry.azurecr.io')
  REGISTRY_NAME: ''

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: >
          dotnet test --configuration Release --no-build 
          --verbosity normal --collect:"XPlat Code Coverage"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: '**/TestResults/**/*'
          retention-days: 30

  build-and-push-containers:
    runs-on: ubuntu-latest
    name: Build and Push Docker Images
    needs: build-and-test
    if: env.REGISTRY_NAME != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata for MinimalApi
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_NAME }}/serverless-benchmark-api
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for BenchmarkRunner
        id: meta-runner
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_NAME }}/serverless-benchmark-runner
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push MinimalApi Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/MinimalApi/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push BenchmarkRunner Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/BenchmarkRunner/Dockerfile
          push: true
          tags: ${{ steps.meta-runner.outputs.tags }}
          labels: ${{ steps.meta-runner.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-containers-dry-run:
    runs-on: ubuntu-latest
    name: Build Docker Images (Dry Run)
    needs: build-and-test
    if: env.REGISTRY_NAME == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build MinimalApi Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/MinimalApi/Dockerfile
          push: false
          tags: serverless-benchmark-api:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build BenchmarkRunner Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/BenchmarkRunner/Dockerfile
          push: false
          tags: serverless-benchmark-runner:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Registry Configuration Notice
        run: >
          echo "::notice title=Registry Configuration::To enable container 
          registry push, set the REGISTRY_NAME environment variable and 
          configure ACR_USERNAME and ACR_PASSWORD secrets"