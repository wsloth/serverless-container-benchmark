---
name: Main Branch CI/CD

'on':
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'deploy/**'
      - '.github/workflows/infrastructure-*.yml'

env:
  DOTNET_VERSION: '9.0.x'
  # Resource group name is consistent with infrastructure deployment
  AZURE_RESOURCE_GROUP: 'serverless-container-benchmark'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: |
          dotnet test --configuration Release --no-build \
            --verbosity normal --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --logger "trx;LogFileName=TestResults.trx"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            TestResults/
            **/TestResults/
          retention-days: 30

  build-and-push-containers:
    runs-on: ubuntu-latest
    name: Build and Push Docker Images
    needs: build-and-test

    # Grant GITHUB_TOKEN the permissions required to authenticate
    # with Azure via federated identity
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Container Registries from Resource Group
        id: get-acrs
        run: |
          # Check if resource group exists
          if ! az group exists --name ${{ env.AZURE_RESOURCE_GROUP }}; then
            echo "Resource group ${{ env.AZURE_RESOURCE_GROUP }} does not exist. Skipping container push."
            echo "skip_push=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get list of ACRs in the resource group
          acrs=$(az acr list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[].{name:name, loginServer:loginServer}" -o json | jq -c '.')
          
          if [ "$(echo "$acrs" | jq '. | length')" -eq 0 ]; then
            echo "No container registries found in resource group. Skipping container push."
            echo "skip_push=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found $(echo "$acrs" | jq '. | length') container registries"
          echo "acrs=$(echo "$acrs" | jq -c '.')" >> $GITHUB_OUTPUT
          echo "skip_push=false" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: steps.get-acrs.outputs.skip_push != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push to all regional ACRs
        if: steps.get-acrs.outputs.skip_push != 'true'
        run: |
          acrs='${{ steps.get-acrs.outputs.acrs }}'
          
          for row in $(echo "$acrs" | jq -r '.[] | @base64'); do
            _jq() {
              echo "${row}" | base64 --decode | jq -r "${1}"
            }
            
            acr_name=$(_jq '.name')
            acr_login_server=$(_jq '.loginServer')
            
            echo "Logging in to $acr_name"
            az acr login --name "$acr_name"
            
            echo "Building and pushing MinimalApi to $acr_login_server"
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push \
              --tag "${acr_login_server}/serverless-benchmark-api:latest" \
              --tag "${acr_login_server}/serverless-benchmark-api:${GITHUB_SHA::7}" \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              --file src/MinimalApi/Dockerfile \
              .
            
            echo "Building and pushing BenchmarkRunner to $acr_login_server"
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push \
              --tag "${acr_login_server}/serverless-benchmark-runner:latest" \
              --tag "${acr_login_server}/serverless-benchmark-runner:${GITHUB_SHA::7}" \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              --file src/BenchmarkRunner/Dockerfile \
              .
          done

      - name: Update Azure Container Apps with new image tags
        if: steps.get-acrs.outputs.skip_push != 'true'
        run: |
          acrs='${{ steps.get-acrs.outputs.acrs }}'
          image_tag="${GITHUB_SHA::7}"
          
          for row in $(echo "$acrs" | jq -r '.[] | @base64'); do
            _jq() {
              echo "${row}" | base64 --decode | jq -r "${1}"
            }
            
            acr_name=$(_jq '.name')
            acr_login_server=$(_jq '.loginServer')
            
            # Extract region from resource group or ACR name
            # Assumes naming convention: acr{region} or similar
            region=$(echo "$acr_name" | sed 's/acr//' | tr '[:upper:]' '[:lower:]')
            
            echo "Updating Container Apps in region: $region"
            
            # Update MinimalApi Container App
            api_app_name="scb-${region}-api"
            echo "Updating $api_app_name with new image tag: ${acr_login_server}/serverless-benchmark-api:${image_tag}"
            az containerapp update \
              --name "$api_app_name" \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image "${acr_login_server}/serverless-benchmark-api:${image_tag}" \
              2>/dev/null || echo "Container App $api_app_name not found, skipping..."
            
            # Update BenchmarkRunner Container App Job
            runner_job_name="scb-${region}-benchmark"
            echo "Updating $runner_job_name with new image tag: ${acr_login_server}/serverless-benchmark-runner:${image_tag}"
            az containerapp job update \
              --name "$runner_job_name" \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image "${acr_login_server}/serverless-benchmark-runner:${image_tag}" \
              2>/dev/null || echo "Container App Job $runner_job_name not found, skipping..."
          done

  validate-docker-builds:
    runs-on: ubuntu-latest
    name: Validate Docker Builds
    needs: [build-and-test, build-and-push-containers]
    if: always() && needs.build-and-test.result == 'success' && needs.build-and-push-containers.result == 'skipped'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build MinimalApi Docker image (validation only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/MinimalApi/Dockerfile
          push: false
          tags: serverless-benchmark-api:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build BenchmarkRunner Docker image (validation only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/BenchmarkRunner/Dockerfile
          push: false
          tags: serverless-benchmark-runner:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup Instructions
        run: |
          echo "::notice title=Azure Infrastructure Not Found::No container registries found. To enable container image deployment, run the infrastructure deployment workflow first to create the required Azure resources in the '${{ env.AZURE_RESOURCE_GROUP }}' resource group."
