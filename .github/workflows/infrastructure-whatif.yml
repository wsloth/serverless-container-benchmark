name: Infrastructure What-If

on:
  pull_request:
    paths:
      - 'deploy/**'
      - '.github/workflows/infrastructure-*.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  bicep-whatif:
    name: Bicep What-If
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install Bicep CLI
      run: az bicep install

    - name: Bicep Build
      run: |
        cd deploy
        az bicep build --file bicep/main.bicep

    - name: Build Image URIs from Regional ACRs
      id: build-image-uris
      continue-on-error: true
      run: |
        # Check if resource group exists and has ACRs
        if ! az group exists --name serverless-container-benchmark; then
          echo "::warning::Resource group 'serverless-container-benchmark' does not exist. Using placeholder values."
          echo "minimal_api_image=#{MinimalApiImage}#" >> $GITHUB_OUTPUT
          echo "benchmark_runner_image=#{BenchmarkRunnerImage}#" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Get the first regional ACR to construct image URIs
        acr=$(az acr list --resource-group serverless-container-benchmark --query "[0]" -o json)
        
        if [ -z "$acr" ] || [ "$acr" == "null" ]; then
          echo "::warning::No container registries found. Using placeholder values."
          echo "minimal_api_image=#{MinimalApiImage}#" >> $GITHUB_OUTPUT
          echo "benchmark_runner_image=#{BenchmarkRunnerImage}#" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        login_server=$(echo "$acr" | jq -r '.loginServer')
        echo "Found ACR login server: $login_server"
        
        minimal_api_image="${login_server}/serverless-benchmark-api:latest"
        benchmark_runner_image="${login_server}/serverless-benchmark-runner:latest"
        
        echo "minimal_api_image=${minimal_api_image}" >> $GITHUB_OUTPUT
        echo "benchmark_runner_image=${benchmark_runner_image}" >> $GITHUB_OUTPUT

    - name: Azure What-If
      id: whatif
      run: |
        cd deploy
        
        # Update parameters with resolved image URIs
        minimal_api_image="${{ steps.build-image-uris.outputs.minimal_api_image }}"
        benchmark_runner_image="${{ steps.build-image-uris.outputs.benchmark_runner_image }}"
        
        sed -i "s|#{MinimalApiImage}#|${minimal_api_image}|g" parameters/prod.bicepparam
        sed -i "s|#{BenchmarkRunnerImage}#|${benchmark_runner_image}|g" parameters/prod.bicepparam
        
        echo "## Infrastructure What-If - Production" >> whatif-output.md
        echo "" >> whatif-output.md
        echo "**Image URIs:**" >> whatif-output.md
        echo "- MinimalApi: \`${minimal_api_image}\`" >> whatif-output.md
        echo "- BenchmarkRunner: \`${benchmark_runner_image}\`" >> whatif-output.md
        echo "" >> whatif-output.md
        echo '```' >> whatif-output.md
        az deployment group what-if \
          --resource-group serverless-container-benchmark \
          --template-file bicep/main.bicep \
          --parameters parameters/prod.bicepparam \
          --only-show-errors >> whatif-output.md
        echo '```' >> whatif-output.md
        echo "" >> whatif-output.md

    - name: Comment PR with What-If Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './deploy/whatif-output.md';
          
          if (fs.existsSync(path)) {
            const whatifOutput = fs.readFileSync(path, 'utf8');
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Infrastructure What-If - Production')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: whatifOutput
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: whatifOutput
              });
            }
          }