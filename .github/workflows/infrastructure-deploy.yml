name: Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'deploy/**'
      - '.github/workflows/infrastructure-deploy.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install Bicep CLI
      run: az bicep install

    - name: Validate Bicep Templates
      run: |
        cd deploy
        ./validate.sh

    - name: Build Image URIs from Regional ACRs
      id: build-image-uris
      run: |
        # Check if resource group exists and has ACRs
        if ! az group exists --name serverless-container-benchmark; then
          echo "::warning::Resource group 'serverless-container-benchmark' does not exist. Cannot determine image URIs."
          exit 1
        fi
        
        # Get the first regional ACR to construct image URIs
        acr=$(az acr list --resource-group serverless-container-benchmark --query "[0]" -o json)
        
        if [ -z "$acr" ] || [ "$acr" == "null" ]; then
          echo "::warning::No container registries found in resource group."
          exit 1
        fi
        
        login_server=$(echo "$acr" | jq -r '.loginServer')
        echo "Found ACR login server: $login_server"
        
        # Build full image URIs with latest tag
        minimal_api_image="${login_server}/serverless-benchmark-api:latest"
        benchmark_runner_image="${login_server}/serverless-benchmark-runner:latest"
        
        echo "minimal_api_image=${minimal_api_image}" >> $GITHUB_OUTPUT
        echo "benchmark_runner_image=${benchmark_runner_image}" >> $GITHUB_OUTPUT
        
        echo "Image URIs:"
        echo "  MinimalApi: ${minimal_api_image}"
        echo "  BenchmarkRunner: ${benchmark_runner_image}"

    - name: Deploy Infrastructure
      run: |
        cd deploy
        echo "Deploying to production environment"
        
        # Update container image parameters with constructed URIs
        minimal_api_image="${{ steps.build-image-uris.outputs.minimal_api_image }}"
        benchmark_runner_image="${{ steps.build-image-uris.outputs.benchmark_runner_image }}"
        
        sed -i "s|#{MinimalApiImage}#|${minimal_api_image}|g" parameters/prod.bicepparam
        sed -i "s|#{BenchmarkRunnerImage}#|${benchmark_runner_image}|g" parameters/prod.bicepparam
        
        echo "Updated parameters/prod.bicepparam with:"
        echo "  MinimalApiImage: ${minimal_api_image}"
        echo "  BenchmarkRunnerImage: ${benchmark_runner_image}"
        
        # Deploy the infrastructure
        deployment_name="scb-prod-$(date +%Y%m%d-%H%M%S)"
        
        az deployment group create \
          --resource-group serverless-container-benchmark \
          --name $deployment_name \
          --template-file bicep/main.bicep \
          --parameters parameters/prod.bicepparam \
          --verbose

    - name: Output Deployment Results
      run: |
        cd deploy
        deployment_name="scb-prod-$(date +%Y%m%d-%H%M%S)"
        
        echo "## Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Name:** $deployment_name" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Get deployment outputs
        outputs=$(az deployment sub show --name $deployment_name --query properties.outputs --output json)
        echo "**Deployment Outputs:**" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        echo "$outputs" | jq . >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY